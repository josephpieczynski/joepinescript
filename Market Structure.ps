//@version=5
indicator("Market Structure by Eskimojo", overlay=true, max_labels_count=500, max_lines_count=500, max_bars_back=1000)

// ==================
// Import Time Library
// ==================
import JoePieczynski/MyReusableFunctions/2 as timeLib

// Get time conditions from library
timeConditions = timeLib.getTimeConditions()

// ==================
// Constants & Utility Functions
// ==================
color CLEAR = color.rgb(0,0,0,100)

// Line style conversion function
lineStyle(x) =>
    switch x
        'Solid' => line.style_solid
        'Dashed' => line.style_dashed
        'Dotted' => line.style_dotted

// Common condition checks to reduce redundant calculations
bool isUS500 = str.contains(syminfo.ticker, "US500")
bool isValidTimeframe = timeframe.in_seconds(timeframe.period) <= timeframe.in_seconds("10")

// ==================
// Inputs
// ==================
reminder = input.string(title="Morning Reminder", defval="")
swingSize = input.int(10, 'Swing Length', tooltip='The number of left and right bars checked when searching for a swing point. Higher value = less swing points plotted and lower value = more swing points plotted.')
STswingSize = input.int(5, '1 Minute Timeframe Swing Length', tooltip='The number of left and right bars checked when searching for a swing point. Higher value = less swing points plotted and lower value = more swing points plotted.')
bosConfType = input.string('Candle Close', 'BOS Confirmation', ['Candle Close', 'Wicks'], tooltip='Choose whether candle close/wick above previous swing point counts as a BOS.')
strategy = input.bool(true, 'Show Strategies')

showSwing = input.bool(true, 'Show Swing Points', tooltip='Show or hide HH, LH, HL, LL')
showTF2zones = input.bool(true, 'Show Timeframe 2 Long/Short Zones', tooltip='If there is a change of trend on timeframe 2, display zones to either long the next higher low or short the next lower high. Look for a trend change on the lower timeframe ')
LongEntry = input.bool(false, 'Long Entry')
ShortEntry = input.bool(false, 'Short Entry')
showHalf = input.bool(true, 'Show 0.618 Retracement Level', group='0.618 Retracement Level', tooltip='Show a possible 0.618 retracement level between the swing highs and lows of an expansion move.')
halfColor = input.color(color.rgb(2, 255, 149), 'Bullish Color', group='0.618 Retracement Level')
halfStyle = input.string('Solid', 'Bullish Line Style', ['Solid', 'Dashed', 'Dotted'], group='0.618 Retracement Level')
halfWidth = input.int(1, 'Bullish Width', minval=1, group='0.618 Retracement Level')
halfColorDown = input.color(color.rgb(255, 179, 0), 'Bearish Color', group='0.618 Retracement Level')
halfStyleDown= input.string('Solid', 'Bearish Line Style', ['Solid', 'Dashed', 'Dotted'], group='0.618 Retracement Level')
halfWidthDown= input.int(1, 'Bearish Width', minval=1, group='0.618 Retracement Level')

bosColor = input.color(color.rgb(112, 114, 119), 'Color', group='BOS Settings')
bosStyle = input.string('Dashed', 'Line Style', ['Solid', 'Dashed', 'Dotted'], group='BOS Settings')
bosWidth = input.int(1, 'Width', minval=1, group='BOS Settings')

TF1Boolean = input.bool(true, title="Display Timeframe 1")
TF1timeframe = input.string('60', 'Timeframe 1', tooltip='The number of left and right bars checked when searching for a swing point. Higher value = less swing points plotted and lower value = more swing points plotted.')
TF1swingSize = input.int(10, 'Timeframe 1 Swing Length', tooltip='The number of left and right bars checked when searching for a swing point. Higher value = less swing points plotted and lower value = more swing points plotted.')
TF2Boolean = input.bool(true, title="Display Timeframe 2")
TF2timeframe = input.string('10', 'Timeframe 2', tooltip='The number of left and right bars checked when searching for a swing point. Higher value = less swing points plotted and lower value = more swing points plotted.')
TF2swingSize = input.int(3, 'Timeframe 2 Swing Length', tooltip='The number of left and right bars checked when searching for a swing point. Higher value = less swing points plotted and lower value = more swing points plotted.')
TF3Boolean = input.bool(true, title="Display Timeframe 3")
TF3timeframe = input.string('240', 'Timeframe 3', tooltip='The number of left and right bars checked when searching for a swing point. Higher value = less swing points plotted and lower value = more swing points plotted.')
TF3swingSize = input.int(10, 'Timeframe 3 Swing Length', tooltip='The number of left and right bars checked when searching for a swing point. Higher value = less swing points plotted and lower value = more swing points plotted.')

// ==================
// Previous Day High/Low
// ==================
int lookbackday = 1
if request.security(syminfo.tickerid, 'D', barstate.isconfirmed[0])
    lookbackday := 0
else
    lookbackday := 1
prevdayhigh = request.security(syminfo.tickerid, 'D', high[lookbackday])
prevdaylow = request.security(syminfo.tickerid, 'D', low[lookbackday])

// ==================
// Main Timeframe Pivot and Trend Detection
// ==================
// Determine the appropriate swing size based on timeframe
cswingSize = swingSize
if timeframe.period == "1"
    cswingSize := STswingSize
else if timeframe.period == TF2timeframe
    cswingSize := TF2swingSize
else if timeframe.period == TF1timeframe
    cswingSize := TF1swingSize
else if timeframe.period == TF3timeframe
    cswingSize := TF3swingSize

// Finding high and low pivots
pivHi = ta.pivothigh(high, cswingSize, cswingSize)
pivLo = ta.pivotlow(low, cswingSize, cswingSize)

// Tracking previous swing levels and breakouts
var float prevHigh = na
var float prevLow = na
var int prevHighIndex = na
var int prevLowIndex = na
var bool highActive = false
var bool lowActive = false
var int prevBreakoutDir = 0
var int prevSwing = 0

// Booleans for swing identification
bool hh = false
bool lh = false
bool hl = false
bool ll = false

// Update highs and pivot types
if not na(pivHi)
    if pivHi >= prevHigh
        hh := true
        prevSwing := 2
    else
        lh := true
        prevSwing := 1
    prevHigh := pivHi
    highActive := true
    prevHighIndex := bar_index - cswingSize

// Update lows and pivot types
if not na(pivLo)
    if pivLo >= prevLow
        hl := true
        prevSwing := -1
    else
        ll := true
        prevSwing := -2
    prevLow := pivLo
    lowActive := true
    prevLowIndex := bar_index - cswingSize

// Breakout detection
bool highBroken = false
bool lowBroken = false

float highSrc = bosConfType == 'Candle Close' ? close : high
float lowSrc = bosConfType == 'Candle Close' ? close : low

if highSrc > prevHigh and highActive
    highBroken := true
    highActive := false
    
if lowSrc < prevLow and lowActive
    lowBroken := true
    lowActive := false

// ==================
// Visual Output for Main Timeframe
// ==================
// Swing level labels
if hh and showSwing
    label.new(bar_index - cswingSize, pivHi, 'HH', color=CLEAR, style=label.style_label_down, textcolor=chart.fg_color)
if lh and showSwing
    label.new(bar_index - cswingSize, pivHi, 'LH', color=CLEAR, style=label.style_label_down, textcolor=chart.fg_color)
if hl and showSwing
    label.new(bar_index - cswingSize, pivLo, 'HL', color=CLEAR, style=label.style_label_up, textcolor=chart.fg_color)
if ll and showSwing
    label.new(bar_index - cswingSize, pivLo, 'LL', color=CLEAR, style=label.style_label_up, textcolor=chart.fg_color)

// Generate trend message
msg = ""
if highBroken and prevBreakoutDir == 1
    msg := "Continuation Higher"
if lowBroken and prevBreakoutDir == -1
    msg := "Continuation Lower"
if highBroken and prevBreakoutDir == -1
    msg := "Change of Trend Higher"
if lowBroken and prevBreakoutDir == 1
    msg := "Change of Trend Lower"

// Create alert conditions
alertcondition(highBroken and prevBreakoutDir == -1, "Change of Trend Higher", "Change of Trend Higher")
alertcondition(lowBroken and prevBreakoutDir == 1, "Change of Trend Lower", "Change of Trend Lower")
alertcondition((lowBroken and prevBreakoutDir == 1) or (highBroken and prevBreakoutDir == -1), "Change of Trend", "Change of Trend")
alertcondition(timeConditions.isMarketHours and ((lowBroken and prevBreakoutDir == 1) or (highBroken and prevBreakoutDir == -1)), "Change of Trend Business Hours", "Change of Trend Business Hours")
alertcondition(highBroken and prevBreakoutDir == 1, "Continuation Higher", "Continuation Higher")
alertcondition(lowBroken and prevBreakoutDir == -1, "Continuation Lower", "Continuation Lower")
alertcondition((lowBroken and prevBreakoutDir == -1) or (highBroken and prevBreakoutDir == 1), "Continuation Break", "Continuation Break")

// Draw BOS/CHoCH lines
if highBroken
    line.new(prevHighIndex, prevHigh, bar_index, prevHigh, color=bosColor, style=lineStyle(bosStyle), width=bosWidth)
    prevBreakoutDir := 1
if lowBroken
    line.new(prevLowIndex, prevLow, bar_index, prevLow, color=bosColor, style=lineStyle(bosStyle), width=bosWidth)
    prevBreakoutDir := -1

// Draw pivot lines
var line pivHighLline = line.new(na, na, na, na, extend=extend.right, style = line.style_dotted, width = 2, color = color.green)
var line pivLowLine = line.new(na, na, na, na, extend=extend.right, style = line.style_dotted, width = 2, color = color.red)
bullLabelText = 'Bull'
bearLabelText = 'Bear'

var label bullLabel = label.new(bar_index, na, "", textcolor = color.green, size = size.small, style = label.style_none, textalign = text.align_right)
var label bearLabel = label.new(bar_index, na, "", textcolor = color.red, size = size.small, style = label.style_none)
label.set_x(bullLabel, bar_index[0])
label.set_x(bearLabel, bar_index[0])

if not na(pivHi)
    line.set_xy1(pivHighLline, bar_index-cswingSize, pivHi)
    line.set_xy2(pivHighLline, bar_index, pivHi)
    label.set_xy(bullLabel, bar_index, pivHi)

if not na(pivLo)
    line.set_xy1(pivLowLine, bar_index-cswingSize, pivLo)
    line.set_xy2(pivLowLine, bar_index, pivLo)
    label.set_xy(bearLabel, bar_index, pivLo)

if highBroken and not highActive
    label.set_text(bullLabel, "                                                                                                                                                               "+timeframe.period+"  Bullish Continuation Above")
    label.set_text(bearLabel, "                                                                                                                                                               "+timeframe.period+"  Bearish Change of Trend Below")
if lowBroken and not lowActive
    label.set_text(bullLabel, "                                                                                                                                                               "+timeframe.period+"  Bullish Change of Trend Above")
    label.set_text(bearLabel, "                                                                                                                                                               "+timeframe.period+"  Bearish Continuation Below") 

// ==================
// Multi-Timeframe Analysis Functions
// ==================
// Function to calculate pivots and update previous levels for a timeframe
calcTFPivots(tf, swingSize) =>
    pivHi = request.security(syminfo.tickerid, tf, ta.pivothigh(high, swingSize, swingSize))
    pivLo = request.security(syminfo.tickerid, tf, ta.pivotlow(low, swingSize, swingSize))
    [pivHi, pivLo]


// ==================
// Timeframe 1 Logic
// ==================
// Variables for TF1
var float TF1prevHigh = na
var float TF1prevLow = na
var int TF1prevHighIndex = na
var int TF1prevLowIndex = na
var bool TF1highActive = false
var bool TF1lowActive = false
var int TF1prevBreakoutDir = 0
var int TF1prevSwing = 0

// Calculate TF1 pivots
[TF1pivHi, TF1pivLo] = calcTFPivots(TF1timeframe, TF1swingSize)

// Determine TF1 pivot types
bool TF1hh = false
bool TF1lh = false
bool TF1hl = false
bool TF1ll = false

if not na(TF1pivHi)
    if TF1pivHi >= TF1prevHigh
        TF1hh := true
        TF1prevSwing := 2
    else
        TF1lh := true
        TF1prevSwing := 1
    TF1prevHigh := TF1pivHi
    TF1highActive := true
    TF1prevHighIndex := bar_index - TF1swingSize

if not na(TF1pivLo)
    if TF1pivLo >= TF1prevLow
        TF1hl := true
        TF1prevSwing := -1
    else
        TF1ll := true
        TF1prevSwing := -2
    TF1prevLow := TF1pivLo
    TF1lowActive := true
    TF1prevLowIndex := bar_index - TF1swingSize

// Detect TF1 breakouts
bool TF1highBroken = false
bool TF1lowBroken = false

float TF1highSrc = bosConfType == 'Candle Close' ? request.security(syminfo.tickerid, TF1timeframe, close) : request.security(syminfo.tickerid, TF1timeframe, high)
float TF1lowSrc = bosConfType == 'Candle Close' ? request.security(syminfo.tickerid, TF1timeframe, close) : request.security(syminfo.tickerid, TF1timeframe, low)

if TF1highSrc > TF1prevHigh and TF1highActive
    TF1highBroken := true
    TF1highActive := false
    
if TF1lowSrc < TF1prevLow and TF1lowActive
    TF1lowBroken := true
    TF1lowActive := false

// ==================
// Timeframe 2 Logic
// ==================
// Variables for TF2
var float TF2prevHigh = na
var float TF2prevLow = na
var int TF2prevHighIndex = na
var int TF2prevLowIndex = na
var bool TF2highActive = false
var bool TF2lowActive = false
var int TF2prevBreakoutDir = 0
var int TF2prevSwing = 0

// Calculate TF2 pivots
[TF2pivHi, TF2pivLo] = calcTFPivots(TF2timeframe, TF2swingSize)

// Determine TF2 pivot types
bool TF2hh = false
bool TF2lh = false
bool TF2hl = false
bool TF2ll = false

if not na(TF2pivHi)
    if TF2pivHi >= TF2prevHigh
        TF2hh := true
        TF2prevSwing := 2
    else
        TF2lh := true
        TF2prevSwing := 1
    TF2prevHigh := TF2pivHi
    TF2highActive := true
    TF2prevHighIndex := bar_index - TF2swingSize

if not na(TF2pivLo)
    if TF2pivLo >= TF2prevLow
        TF2hl := true
        TF2prevSwing := -1
    else
        TF2ll := true
        TF2prevSwing := -2
    TF2prevLow := TF2pivLo
    TF2lowActive := true
    TF2prevLowIndex := bar_index - TF2swingSize

// Detect TF2 breakouts
bool TF2highBroken = false
bool TF2lowBroken = false

float TF2highSrc = bosConfType == 'Candle Close' ? request.security(syminfo.tickerid, TF2timeframe, close) : request.security(syminfo.tickerid, TF2timeframe, high)
float TF2lowSrc = bosConfType == 'Candle Close' ? request.security(syminfo.tickerid, TF2timeframe, close) : request.security(syminfo.tickerid, TF2timeframe, low)

if TF2highSrc > TF2prevHigh and TF2highActive
    TF2highBroken := true
    TF2highActive := false
    
if TF2lowSrc < TF2prevLow and TF2lowActive
    TF2lowBroken := true
    TF2lowActive := false

// ==================
// Timeframe 3 Logic
// ==================
// Variables for TF3
var float TF3prevHigh = na
var float TF3prevLow = na
var int TF3prevHighIndex = na
var int TF3prevLowIndex = na
var bool TF3highActive = false
var bool TF3lowActive = false
var int TF3prevBreakoutDir = 0
var int TF3prevSwing = 0

// Calculate TF3 pivots
[TF3pivHi, TF3pivLo] = calcTFPivots(TF3timeframe, TF3swingSize)

// Determine TF3 pivot types
bool TF3hh = false
bool TF3lh = false
bool TF3hl = false
bool TF3ll = false

if not na(TF3pivHi)
    if TF3pivHi >= TF3prevHigh
        TF3hh := true
        TF3prevSwing := 2
    else
        TF3lh := true
        TF3prevSwing := 1
    TF3prevHigh := TF3pivHi
    TF3highActive := true
    TF3prevHighIndex := bar_index - TF3swingSize

if not na(TF3pivLo)
    if TF3pivLo >= TF3prevLow
        TF3hl := true
        TF3prevSwing := -1
    else
        TF3ll := true
        TF3prevSwing := -2
    TF3prevLow := TF3pivLo
    TF3lowActive := true
    TF3prevLowIndex := bar_index - TF3swingSize

// Detect TF3 breakouts
bool TF3highBroken = false
bool TF3lowBroken = false

float TF3highSrc = bosConfType == 'Candle Close' ? request.security(syminfo.tickerid, TF3timeframe, close) : request.security(syminfo.tickerid, TF3timeframe, high)
float TF3lowSrc = bosConfType == 'Candle Close' ? request.security(syminfo.tickerid, TF3timeframe, close) : request.security(syminfo.tickerid, TF3timeframe, low)

if TF3highSrc > TF3prevHigh and TF3highActive
    TF3highBroken := true
    TF3highActive := false
    
if TF3lowSrc < TF3prevLow and TF3lowActive
    TF3lowBroken := true
    TF3lowActive := false

// ==================
// Table Creation and Updates
// ==================
var table TF2myTable = table.new(position.bottom_center, 2, 6)


// ==================
// 30-Minute Timeframe Direction
// ==================
tysmtfpivhi = request.security(syminfo.tickerid, "30", ta.pivothigh(high, 3, 3), lookahead = barmerge.lookahead_off)
tysmtfpivlo = request.security(syminfo.tickerid, "30", ta.pivotlow(low, 3, 3), lookahead = barmerge.lookahead_off)
var string typricedirection = ""
var float tysmtfprevhi = na
var float tysmtfprevlo = na

if not na(tysmtfpivhi)
    tysmtfprevhi := tysmtfpivhi
if not na(tysmtfpivlo)
    tysmtfprevlo := tysmtfpivlo

// Determine 30m direction
if ta.crossover(close[1], tysmtfprevhi) and close > tysmtfprevhi and (typricedirection == "down" or typricedirection == "")
    typricedirection := "up"
if ta.crossunder(close[1], tysmtfprevlo) and close < tysmtfprevlo and (typricedirection == "up" or typricedirection == "")
    typricedirection := "down"

// ==================
// Table Update Function
// ==================
// Update table with trend information
if highBroken and not highActive
    table.cell(TF2myTable, 0, 0, timeframe.period+"  Trend is Up (C)", bgcolor = color.rgb(76, 175, 79, 50), text_size = size.normal, text_color = color.white)

if lowBroken and not lowActive
    table.cell(TF2myTable, 0, 0, timeframe.period+"  Trend is Down(C)", bgcolor = color.rgb(255, 82, 82, 50), text_size = size.normal, text_color = color.white)

if TF2Boolean and TF2highBroken and not TF2highActive and timeframe.in_seconds(timeframe.period) <= timeframe.in_seconds(TF2timeframe)
    table.cell(TF2myTable, 0, 1, TF2timeframe + "  Trend is Up", bgcolor = color.rgb(76, 175, 79, 50), text_size = size.normal, text_color = color.white)

if TF2Boolean and TF2lowBroken and not TF2lowActive and timeframe.in_seconds(timeframe.period) <= timeframe.in_seconds(TF2timeframe)
    table.cell(TF2myTable, 0, 1, TF2timeframe + "  Trend is Down", bgcolor = color.rgb(255, 82, 82, 50), text_size = size.normal, text_color = color.white)

if typricedirection == "up" and timeframe.in_seconds(timeframe.period) <= timeframe.in_seconds("30")
    table.cell(TF2myTable, 0, 2, "30  Trend is Up", bgcolor = color.rgb(76, 175, 79, 50), text_size = size.normal, text_color = color.white)

if typricedirection == "down" and timeframe.in_seconds(timeframe.period) <= timeframe.in_seconds("30")
    table.cell(TF2myTable, 0, 2, " 30 Trend is Down", bgcolor = color.rgb(255, 82, 82, 50), text_size = size.normal, text_color = color.white)

if TF1Boolean and TF1highBroken and not TF1highActive and timeframe.in_seconds(timeframe.period) <= timeframe.in_seconds(TF1timeframe)
    table.cell(TF2myTable, 0, 3, TF1timeframe + "  Trend is Up", bgcolor = color.rgb(76, 175, 79, 50), text_size = size.normal, text_color = color.white)

if TF1Boolean and TF1lowBroken and not TF1lowActive and timeframe.in_seconds(timeframe.period) <= timeframe.in_seconds(TF1timeframe)
    table.cell(TF2myTable, 0, 3, TF1timeframe + "  Trend is Down", bgcolor = color.rgb(255, 82, 82, 50), text_size = size.normal, text_color = color.white)

if TF3Boolean and TF3highBroken and not TF3highActive and timeframe.in_seconds(timeframe.period) <= timeframe.in_seconds(TF3timeframe)
    table.cell(TF2myTable, 0, 4, TF3timeframe + "  Trend is Up", bgcolor = color.rgb(76, 175, 79, 50), text_size = size.normal, text_color = color.white)

if TF3Boolean and TF3lowBroken and not TF3lowActive and timeframe.in_seconds(timeframe.period) <= timeframe.in_seconds(TF3timeframe)
    table.cell(TF2myTable, 0, 4, TF3timeframe + "  Trend is Down", bgcolor = color.rgb(255, 82, 82, 50), text_size = size.normal, text_color = color.white)

// ==================
// Timeframe 1 Visual Elements
// ==================
var line TF1pivHighLline = line.new(na, na, na, na, extend=extend.right, style = line.style_solid, width = 2, color = color.green)
var line TF1pivLowLine = line.new(na, na, na, na, extend=extend.right, style = line.style_solid, width = 2, color = color.red)

var label TF1bullLabel = label.new(bar_index, na, "", textcolor = color.green, size = size.small, style = label.style_none, textalign = text.align_right)
var label TF1bearLabel = label.new(bar_index, na, "", textcolor = color.red, size = size.small, style = label.style_none)
label.set_x(TF1bullLabel, bar_index[0])
label.set_x(TF1bearLabel, bar_index[0])

TF1pivHi2 = request.security(syminfo.tickerid, TF1timeframe, ta.pivothigh(high, TF1swingSize, TF1swingSize))
TF1pivLo2 = request.security(syminfo.tickerid, TF1timeframe, ta.pivotlow(low, TF1swingSize, TF1swingSize))

// Update TF1 lines and labels
if not na(TF1pivHi2) and timeframe.in_seconds(timeframe.period) < timeframe.in_seconds(TF1timeframe) and TF1Boolean 
    line.set_xy1(TF1pivHighLline, bar_index-(TF1swingSize*(timeframe.in_seconds(TF1timeframe)/timeframe.in_seconds(timeframe.period))), TF1pivHi2)
    line.set_xy2(TF1pivHighLline, bar_index, TF1pivHi2)
    label.set_xy(TF1bullLabel, bar_index-15, TF1pivHi2)

if not na(TF1pivLo2) and timeframe.in_seconds(timeframe.period) < timeframe.in_seconds(TF1timeframe) and TF1Boolean 
    line.set_xy1(TF1pivLowLine, bar_index-(TF1swingSize*(timeframe.in_seconds(TF1timeframe)/timeframe.in_seconds(timeframe.period))), TF1pivLo2)
    line.set_xy2(TF1pivLowLine, bar_index, TF1pivLo2)
    label.set_xy(TF1bearLabel, bar_index-15, TF1pivLo2)

if TF1highBroken and not TF1highActive and TF1Boolean 
    label.set_text(TF1bullLabel, "                                                                                                                                                               "+TF1timeframe + "  Bullish Continuation Above")
    label.set_text(TF1bearLabel, "                                                                                                                                                               "+TF1timeframe + "  Bearish Change of Trend Below")

if TF1lowBroken and not TF1lowActive and TF1Boolean 
    label.set_text(TF1bullLabel, "                                                                                                                                                               "+TF1timeframe + "  Bullish Change of Trend Above")
    label.set_text(TF1bearLabel, "                                                                                                                                                               "+TF1timeframe + "  Bearish Continuation Below") 

// ==================
// Timeframe 2 Visual Elements
// ==================
var line TF2pivHighLline = line.new(na, na, na, na, extend=extend.right, style = line.style_dashed, width = 2, color = color.green)
var line TF2pivLowLine = line.new(na, na, na, na, extend=extend.right, style = line.style_dashed, width = 2, color = color.red)

var label TF2bullLabel = label.new(bar_index, na, "", textcolor = color.green, size = size.small, style = label.style_none, textalign = text.align_right)
var label TF2bearLabel = label.new(bar_index, na, "", textcolor = color.red, size = size.small, style = label.style_none)
label.set_x(TF2bullLabel, bar_index[0])
label.set_x(TF2bearLabel, bar_index[0])

TF2pivHi2 = request.security(syminfo.tickerid, TF2timeframe, ta.pivothigh(high, TF2swingSize, TF2swingSize))
TF2pivLo2 = request.security(syminfo.tickerid, TF2timeframe, ta.pivotlow(low, TF2swingSize, TF2swingSize))

// Update TF2 lines and labels
if not na(TF2pivHi2) and timeframe.in_seconds(timeframe.period) < timeframe.in_seconds(TF2timeframe) and TF2Boolean 
    line.set_xy1(TF2pivHighLline, bar_index-(TF2swingSize*(timeframe.in_seconds(TF2timeframe)/timeframe.in_seconds(timeframe.period))), TF2pivHi2)
    line.set_xy2(TF2pivHighLline, bar_index, TF2pivHi2)
    label.set_xy(TF2bullLabel, bar_index-15, TF2pivHi2)

if not na(TF2pivLo2) and timeframe.in_seconds(timeframe.period) < timeframe.in_seconds(TF2timeframe) and TF2Boolean 
    line.set_xy1(TF2pivLowLine, bar_index-(TF2swingSize*(timeframe.in_seconds(TF2timeframe)/timeframe.in_seconds(timeframe.period))), TF2pivLo2)
    line.set_xy2(TF2pivLowLine, bar_index, TF2pivLo2)
    label.set_xy(TF2bearLabel, bar_index-15, TF2pivLo2)

if TF2highBroken and not TF2highActive and TF2Boolean 
    label.set_text(TF2bullLabel, "                                                                                                                                                               "+TF2timeframe + "  Bullish Continuation Above")
    label.set_text(TF2bearLabel, "                                                                                                                                                               "+TF2timeframe + "  Bearish Change of Trend Below")

if TF2lowBroken and not TF2lowActive and TF2Boolean 
    label.set_text(TF2bullLabel, "                                                                                                                                                               "+TF2timeframe + "  Bullish Change of Trend Above")
    label.set_text(TF2bearLabel, "                                                                                                                                                               "+TF2timeframe + "  Bearish Continuation Below") 

// ==================
// TICK Indicator Logic (SPX/ES)
// ==================
[tick_low, tick_high, tick_close, tick_open] = request.security("USI:TICK", timeframe.period, [low, high, close, open])
var bool prevdayHbroken = false
var bool prevdayLbroken = false
var bool HNH = false
var bool HNL = false
tick_highstr = str.tostring(tick_high)
tick_lowstr = str.tostring(tick_low)

// TICK extreme signals
if ta.crossover(tick_high, 1200) and isUS500 and isValidTimeframe
    label.new(bar_index, low, 'tick '+tick_highstr, color=color.lime, style=label.style_label_up, size = size.normal, textcolor = color.black)
if ta.crossunder(tick_low, -1200) and isUS500 and isValidTimeframe
    label.new(bar_index, low, 'tick '+tick_lowstr, color=color.red, style=label.style_label_up, size = size.normal, textcolor = color.white)

// ==================
// SPY Price and VWAP Analysis
// ==================
SPYPrice = request.security('AMEX:SPY', timeframe.period, close)
SPYConvPrice = close/SPYPrice
spydvwap = request.security('AMEX:SPY', timeframe.period, ta.vwap(ohlc4, timeframe.change("1D")))
spydvwapconv = spydvwap*SPYConvPrice

// ==================
// Opening Range Breakout (ORB) Strategy
// ==================
// Common condition checks to avoid repetition
bool isOpeningHour = timeLib.isInCustomTimeRange(6, 30, 7, 1)
bool isTradingHours = timeLib.isInCustomTimeRange(7, 1, 13, 0)

// ORB variables
var float orbhi = na
var float orblo = na
var float orbhh = na
var float orbll = na
var bool orbbreak = false

// ORB box creation - only create once
var orbbox = box.new(left=na, top=na, right=na, bottom=na, border_color=color.rgb(255, 255, 255), bgcolor=color.rgb(255, 255, 255, 100), border_width=2) 

// Initialize ORB at market open
if timeConditions.isMarketOpen and isValidTimeframe and isUS500
    orbbox := box.new(left=bar_index, top=high, right=bar_index, bottom=low, border_color=color.rgb(255, 255, 255), bgcolor=color.rgb(245, 94, 94, 100))

// Reset ORB variables at 15:00
if timeLib.isInCustomTimeRange(15, 0, 15, 1)  
    orbhi := na
    orblo := na
    orbhh := na
    orbll := na
    orbbreak := false

// Track and update ORB range during opening period
if isOpeningHour and isUS500 and isValidTimeframe
    // Update high values
    if high > orbhh or na(orbhh)
        orbhh := high
        if not na(orbhh)
            box.set_top(orbbox, orbhh)
            orbhi := orbhh
    
    // Update low values
    if low < orbll or na(orbll)
        orbll := low
        if not na(orbll)
            box.set_bottom(orbbox, orbll)
            orblo := orbll

// Only calculate box coloring when needed
if not orbbreak and isUS500 and timeConditions.isMarketHours and isValidTimeframe
    // VWAP relationship determines box color
    if close > spydvwapconv and close[1] > spydvwapconv
        box.set_bgcolor(orbbox, color=color.rgb(94, 234, 99, 70))
        box.set_border_color(orbbox, color=color.green)
    else if close < spydvwapconv and close[1] < spydvwapconv
        box.set_bgcolor(orbbox, color=color.rgb(255, 82, 82, 70))
        box.set_border_color(orbbox, color=color.orange)
    else if (close < spydvwapconv and close[1] > spydvwapconv) or (close > spydvwapconv and close[1] < spydvwapconv)
        box.set_bgcolor(orbbox, color=color.rgb(255, 255, 255, 70))
        box.set_border_color(orbbox, color=color.white)

// ORB breakouts - detect once and set flag
if not orbbreak and isUS500 and isTradingHours and isValidTimeframe
    if close > orbhh
        box.set_bgcolor(orbbox, color=color.rgb(94, 234, 99, 70))
        box.set_border_color(orbbox, color=color.lime)
        orbbreak := true
    else if close < orblo or close < orbll
        box.set_bgcolor(orbbox, color=color.rgb(255, 82, 82, 70))
        box.set_border_color(orbbox, color=color.red)
        orbbreak := true

// Update ORB box right bound
if ((timeConditions.isMarketHours and not orbbreak) or (orbbreak and not orbbreak[1])) and isUS500 and isValidTimeframe
    box.set_right(orbbox, bar_index[0])

// ORB Breakout and Test (BT) signal
if close > orbhi and low < orbhi + .3 and low[1] > orbhi and isUS500 and strategy and isValidTimeframe
    label.new(bar_index, low, 'ORB BT', color = color.rgb(64, 255, 150, 25), style = label.style_label_up, textcolor = color.black, size = size.small)

// Higher timeframe trend breaks
if TF1highBroken
    HNH := true
if TF1lowBroken
    HNL := true
if timeLib.isInCustomTimeRange(13, 0, 13, 1)
    HNH := false
    HNL := false

// Morning reminder
if isUS500 and timeLib.isInCustomTimeRange(6, 0, 6, 1) and reminder != ""
    reminderlabel = label.new(bar_index, low-4, reminder, color = color.rgb(86, 255, 244), style = label.style_label_upper_right, textcolor = color.black, size = size.normal)
    label.delete(reminderlabel[1])

// ==================
// Trigger Time Markers and Signals
// ==================
// Additional time-specific condition
bool isPreMarketTime = timeLib.isInCustomTimeRange(5, 45, 5, 46)

// Update trigger times for PDH/PDL/timeframe breaks
if ((prevdayHbroken and not(prevdayHbroken[1])) or (prevdayHbroken and isPreMarketTime)) and isValidTimeframe and isUS500
    label.new(bar_index, high+4, 'PDH', color = color.rgb(255, 255, 255), style = label.style_label_down, textcolor = color.black, size = size.normal)
if (TF1highBroken or (HNH and isPreMarketTime)) and isValidTimeframe and isUS500
    label.new(bar_index, high+4, '1H NH', color = color.rgb(255, 255, 255), style = label.style_label_down, textcolor = color.black, size = size.normal)
if (TF1lowBroken or (HNL and isPreMarketTime)) and isValidTimeframe and isUS500
    label.new(bar_index, low-4, '1H NL', color = color.rgb(208, 0, 255), style = label.style_label_up, textcolor = color.white, size = size.normal)
if ((prevdayLbroken and not(prevdayLbroken[1])) or (prevdayLbroken and isPreMarketTime)) and isValidTimeframe and isUS500
    label.new(bar_index, low-4, 'PDL', color = color.rgb(208, 0, 255), style = label.style_label_up, textcolor = color.white, size = size.normal)

// ==================
// Small Timeframe HL/LH Strategy
// ==================
var float smtfpivotperiod = 3
if timeframe.period == "1"
    smtfpivotperiod := STswingSize
else
    smtfpivotperiod := 3

// SMTF pivot detection
smtfpivlo = ta.pivotlow(low, smtfpivotperiod, smtfpivotperiod)
smtfpivhi = ta.pivothigh(high, smtfpivotperiod, smtfpivotperiod)
var string direction = ""
var float smtfprevhi = na
var float smtfprevlo = na
var color smtfbullcolor = color.white
var color smtfbearcolor = color.white

// Track small TF pivots
if not na(smtfpivhi)
    smtfprevhi := smtfpivhi
if not na(smtfpivlo)
    smtfprevlo := smtfpivlo

// SMTF direction detection
var int smtfdir = 0
var int smtfenter = 0
var int mtfdirint = 0

// SMTF trend changes
if ta.crossover(close, smtfprevhi) and (direction == "down" or direction == "")
    direction := "up"
    smtfbearcolor := color.white
    smtfbullcolor := color.yellow
    smtfenter := 0
    smtfdir := 1 
    if (typricedirection == 'up' and TF2prevBreakoutDir == 1)
        smtfbullcolor := color.rgb(74, 255, 80)
if ta.crossunder(close, smtfprevlo) and (direction == "up" or direction == "")
    direction := "down"
    smtfbullcolor := color.white
    smtfbearcolor := color.yellow
    smtfdir := -1
    smtfenter := 0 
    if (typricedirection == 'down' and TF2prevBreakoutDir == -1)
        smtfbearcolor := color.rgb(245, 122, 163)

// Medium TF direction for background and color
var color mtfcolor = color.white
var mtfdir = ''
if typricedirection == 'up' and TF2prevBreakoutDir == 1
    mtfcolor := color.rgb(74, 255, 80)
    mtfdir := 'up'
    mtfdirint := 1
if typricedirection == 'down' and TF2prevBreakoutDir == -1
    mtfcolor := color.rgb(237, 63, 232)
    mtfdir := 'down'
    mtfdirint := -1
if not((typricedirection == 'up' and TF2prevBreakoutDir == 1) or (typricedirection == 'down' and TF2prevBreakoutDir == -1))
    mtfcolor := color.white
    mtfdir := 'no direction'
    mtfdirint := 0
if timeframe.in_seconds(timeframe.period) > timeframe.in_seconds(TF2timeframe)
    mtfcolor := na

plot(mtfdirint, title = "medium timeframe direction")

// SMTF change of trend alert
alertcondition((direction == "up" and direction[1] == "down") or (direction == "down" and direction[1] == "up"), "SMTF Change of Trend", "SMTF Change of Trend")

// Background color for trend changes
bgcolor(mtfdir == 'down' and mtfdir[1] != 'down' and isValidTimeframe ? color.rgb(237, 63, 232) : na)
bgcolor(mtfdir == 'up' and mtfdir[1] != 'up' and isValidTimeframe ? color.rgb(74, 255, 80) : na)
bgcolor(mtfdir == 'no direction' and mtfdir[1] != 'no direction' and isValidTimeframe ? color.white : na)

// Failed breakout tracking
var float breakdown = na
var float breakup = na
if mtfdir == 'up' and direction == 'down' and direction[1] == 'up'
    breakdown := smtfprevlo
if close > breakdown and close[1] < breakdown
    label.new(bar_index, low-1, '😬', color = color.rgb(64, 255, 150, 100), style = label.style_label_up, textcolor = color.white, size = size.normal)
if mtfdir == 'down' and direction == 'up' and direction[1] == 'down'
    breakup := smtfprevhi
if close < breakup and close[1] > breakup
    label.new(bar_index, high+1, '😬', color = color.rgb(64, 255, 150, 100), style = label.style_label_up, textcolor = color.white, size = size.normal)
if mtfdir != 'down'
    breakup := na
if mtfdir != 'up'
    breakdown := na

// Plot support/resistance levels based on trend
plot(close < smtfprevhi and LongEntry and timeframe.in_seconds(timeframe.period) < timeframe.in_seconds(TF1timeframe) ? smtfprevhi : na, display=display.pane, color = smtfbullcolor, style = plot.style_steplinebr, linewidth = 3)
plot(close > smtfprevlo and ShortEntry and timeframe.in_seconds(timeframe.period) < timeframe.in_seconds(TF1timeframe) ? smtfprevlo : na, display=display.pane, color = smtfbearcolor, style = plot.style_steplinebr, linewidth = 3)

plot(close < smtfprevhi and LongEntry and not(str.contains(syminfo.ticker, "US500")) and strategy and ((TF1prevBreakoutDir == 1 or TF3prevBreakoutDir == 1) or LongEntry) and timeframe.in_seconds(timeframe.period) < timeframe.in_seconds(TF1timeframe) ? smtfprevhi : na, display=display.pane, color = smtfbullcolor, style = plot.style_steplinebr, linewidth = 3)
plot(close > smtfprevlo and ShortEntry and not(str.contains(syminfo.ticker, "US500")) and strategy and ((TF1prevBreakoutDir == -1 or TF3prevBreakoutDir == -1) or ShortEntry) and timeframe.in_seconds(timeframe.period) < timeframe.in_seconds(TF1timeframe) ? smtfprevlo : na, display=display.pane, color = smtfbearcolor, style = plot.style_steplinebr, linewidth = 3)

// Entry signals based on TICK crosses
if tick_open[1] < 0 and tick_close[1] < 0 and timeframe.multiplier <= 10 and tick_close > 0 and LongEntry and direction == "up" and isUS500
    label.new(bar_index, low-1, '⬆️', color = color.rgb(64, 255, 150, 100), style = label.style_label_up, textcolor = color.white, size = size.normal)
    smtfenter := 1

if tick_open[1] > 0 and tick_close[1] > 0 and timeframe.multiplier <= 10 and tick_close < 0 and ShortEntry and direction == "down" and isUS500
    label.new(bar_index, high+1, '🩳', color = color.rgb(64, 255, 150, 100), style = label.style_label_down, textcolor = color.white, size = size.normal)
    smtfenter := -1

plot(smtfenter, title = "SMTF Enter")

// ==================
// Wick ATR Strategy
// ==================
// Wick calculation
uptop = high - close
upbot = open - low
dntop = high - open
dnbot = close - low
var float wicklo = na
var float wickhi = na
var float wickloshi = na
var float wickhislo = na

// Delta calculation
up_delta = upbot - uptop
down_delta = dntop - dnbot
delta = up_delta ? up_delta : down_delta ? down_delta : 0

pos_delta = delta > 0 ? delta : 0
neg_delta = delta < 0 ? delta : 0

// Standard deviation for wick outliers
stddevlevel = 2.5
stddevlookback = 20
wickdevup = ta.stdev(pos_delta, stddevlookback) * stddevlevel
wickdevdn = ta.stdev(neg_delta, stddevlookback) * -stddevlevel
huntbars = input(title='Highlight Outliers?', defval=true)

// Candle body calculation
lower = open
upper = open
if open > close
    upper := open
    lower := close
else
    upper := close
    lower := open

// Detect hunting wicks (outliers)
huntingup = pos_delta >= wickdevup and math.abs((close - open)) < math.abs((lower-high))
huntingdn = neg_delta <= wickdevdn and math.abs((close - open)) < math.abs((upper-low))
var color bodycolor = na

// Mark hunting wicks
if huntingup and huntbars
    mtfcolor := color.yellow
    wicklo := low
    wickloshi := high
if huntingdn and huntbars
    mtfcolor := color.yellow
    wickhi := high
    wickhislo := low

// Breakouts through hunting wick levels
if ta.crossover(close, wickhi)
    bodycolor := color.lime
    wickhi := na
    wickhislo := na
if ta.crossunder(close, wickhislo)
    bodycolor := color.purple
if ta.crossover(close, wickhi)
    bodycolor := color.lime
    wickhi := na
    wickhislo := na
if ta.crossunder(close, wicklo)
    wicklo := na
    wickloshi := na
    bodycolor := color.purple
if ta.crossover(close, wickloshi)
    bodycolor := color.lime
    wicklo := na
    wickloshi := na

// Plot candles with special coloring
plotcandle(open, high, low, close, color=bodycolor, wickcolor=mtfcolor, bordercolor=mtfcolor, display = display.all-display.status_line)
bodycolor := na

// ==================
// 5-Day Moving Average Strategy
// ==================
ma1 = request.security('SP:SPX', "D", ta.sma(close, 5))
var bool macrossed = false
if ta.cross(high, ma1) or ta.cross(low, ma1)
    macrossed := true

// 5DMA buy/sell signals
if isUS500 and ta.crossover(close, smtfprevhi) and strategy and isValidTimeframe and macrossed and close > ma1
    label.new(bar_index, high, '5DMA Buy', color = color.rgb(64, 255, 150, 25), style = label.style_label_down, textcolor = color.white, size = size.small)
    macrossed := false
if isUS500 and ta.crossunder(close, smtfprevlo) and strategy and isValidTimeframe and macrossed and close < ma1
    label.new(bar_index, high, '5DMA Sell', color = color.rgb(255, 115, 0, 25), style = label.style_label_down, textcolor = color.white, size = size.small)
    macrossed := false

// ==================
// Lunch/EOD Breakout Strategy
// ==================
bool isLunchTime = timeLib.isInCustomTimeRange(11, 0, 13, 0)

if ta.crossover(close, smtfprevhi) and isUS500 and strategy and isLunchTime and close > prevdayhigh and isValidTimeframe
    label.new(bar_index, low, 'EOD Pump', color = color.green, style = label.style_label_up, textcolor = color.white, size = size.small)
if ta.crossunder(close, smtfprevlo) and isUS500 and strategy and isLunchTime and close < prevdaylow and isValidTimeframe
    label.new(bar_index, high, 'EOD Dump', color = color.red, style = label.style_label_down, textcolor = color.white, size = size.small)

// ==================
// 0.618 Retracement Strategy
// ==================
var float currenthigh = na
var float currentlow = na
var float currenthigh2 = na
var float currentlow2 = na
var float upper618 = na
var float lower618 = na
var float bull618 = na
var float bear618 = na
var float dailyhigh = na
var float dailylow = na
var color bullcolor = color.gray
var color bearcolor = color.gray

// Track opening print
if timeConditions.isMarketOpen
    currentlow2 := na
    currenthigh2 := na

// Set colors based on multiple timeframe trends
if TF2prevBreakoutDir == 1 and (TF1prevBreakoutDir == 1 or TF3prevBreakoutDir == 1) 
    bullcolor := color.rgb(157, 251, 160, 40)
    bearcolor := color.rgb(120, 123, 134, 40)
if TF2prevBreakoutDir == -1 and (TF1prevBreakoutDir == -1 or TF3prevBreakoutDir == -1)
    bullcolor := color.rgb(120, 123, 134, 40)
    bearcolor := color.rgb(255, 163, 163, 40)

// Track daily high/low
if dailylow > low 
    dailylow := low
if dailyhigh < high 
    dailyhigh := high
if timeConditions.isMarketClose
    dailyhigh := close
    dailylow := close

// Calculate retracement levels based on trend
if showTF2zones and TF2prevBreakoutDir == 1 
    if (na(currenthigh) or currenthigh < high) and TF2prevBreakoutDir == 1 
        currenthigh := high
    upper618 := currenthigh-(currenthigh-TF2prevLow)*0.618
    lower618 := currenthigh-(currenthigh-dailylow)*0.618

if showTF2zones and TF2prevBreakoutDir == -1 
    if (na(currentlow) or currentlow > low) and TF2prevBreakoutDir == -1 
        currentlow := low
    upper618 := currentlow-(currentlow-TF2prevHigh)*0.618
    lower618 := currentlow-(currentlow-dailyhigh)*0.618

// Reset variables based on trend
if TF2prevBreakoutDir == -1
    currenthigh := na
if TF2prevBreakoutDir == 1
    currentlow := na
if (na(currentlow2) or currentlow2 > low)
    currentlow2 := low
if (na(currenthigh2) or currenthigh2 < high)
    currenthigh2 := high

// Plot retracement levels
u618 = plot(TF2prevBreakoutDir == 1 and isUS500 and showHalf and isValidTimeframe ? upper618 : na, color = bullcolor, title="upper618", style = plot.style_linebr, linewidth = 2) 
l618 = plot(TF2prevBreakoutDir == 1 and isUS500 and showHalf and isValidTimeframe ? lower618-0.3 : na, color = bullcolor, title = "lower618", style = plot.style_linebr, linewidth = 2)
bearu618 = plot(TF2prevBreakoutDir == -1 and isUS500 and showHalf and isValidTimeframe ? upper618 : na, color = bearcolor, title="upper618", style = plot.style_linebr, linewidth = 2)
bearl618 = plot(TF2prevBreakoutDir == -1 and isUS500 and showHalf and isValidTimeframe ? lower618-0.3 : na, color = bearcolor, title = "lower618", style = plot.style_linebr, linewidth = 2)

// Track retracement signals
var bool bull618bool = false
var bool bear618bool = false

// Bullish retracement entry
if timeConditions.isMarketHours and isUS500 and TF2prevBreakoutDir == 1 and (TF1prevBreakoutDir == 1 or TF3prevBreakoutDir == 1) and (ta.crossunder(low-1, upper618) or ta.crossunder(low-1, lower618)) and showHalf and isValidTimeframe and strategy and not (close[1]-3 < upper618) and not (close[1]-3 < lower618)
    bull618bool := true    

// Bearish retracement entry
if timeConditions.isMarketHours and isUS500 and TF2prevBreakoutDir == -1 and (TF1prevBreakoutDir == -1 or TF3prevBreakoutDir == -1) and (ta.crossover(high+1, upper618) or ta.crossover(high+1, lower618)) and showHalf and isValidTimeframe and strategy and not (close[1]+3 > upper618) and not (close[1]+3 > lower618)
    bear618bool := true

// Reset retracement signals if price moves away
if bull618 and close < upper618 and close < lower618 and close[1] < upper618 and close[1] < lower618
    bull618bool := false
if bear618 and close > upper618 and close > lower618 and close[1] > upper618 and close[1] > lower618
    bear618bool := false

// Retracement label
var label retracelabel = label.new(bar_index, na, timeframe.period+" 618 Retrace", textcolor = color.white, size = size.small, style = label.style_none, textalign = text.align_right)
label.set_x(retracelabel, bar_index)

// Draw retracement levels
if (hh and prevBreakoutDir[1] == 1) or (ll and prevBreakoutDir == -1) and showHalf and (timeframe.in_seconds(timeframe.period) > timeframe.in_seconds(TF2timeframe))
    var line bearretrace = line.new(na, na, na, na, color=halfColorDown, style=lineStyle(halfStyleDown), width=halfWidthDown, extend = extend.right)
    var line bullretrace = line.new(na, na, na, na, color=halfColor, style=lineStyle(halfStyle), width=halfWidth, extend = extend.right)
    if hh and prevBreakoutDir[1] == 1 and showHalf and (timeframe.in_seconds(timeframe.period) > timeframe.in_seconds(TF2timeframe))
        line.set_xy1(bullretrace, bar_index, pivHi-(pivHi-prevLow)*0.618)
        line.set_xy2(bullretrace, bar_index+5, pivHi-(pivHi-prevLow)*0.618)
        line.set_xy1(bearretrace, na, na)
        line.set_xy2(bearretrace, na, na)
        label.set_y(retracelabel, pivHi-(pivHi-prevLow)*0.618)
        label.set_text(retracelabel, "                                                                          "+timeframe.period+" 618 Bull Retrace")

    if ll and prevBreakoutDir == -1 and showHalf and (timeframe.in_seconds(timeframe.period) > timeframe.in_seconds(TF2timeframe))
        line.set_xy1(bearretrace, bar_index, prevHigh-(prevHigh-pivLo)*0.382)
        line.set_xy2(bearretrace, bar_index+5, prevHigh-(prevHigh-pivLo)*0.382)
        line.set_xy1(bullretrace, na, na)
        line.set_xy2(bullretrace, na, na)
        label.set_y(retracelabel, prevHigh-(prevHigh-pivLo)*0.382)
        label.set_text(retracelabel, "                                                                          "+timeframe.period+" 618 Bear Retrace")

// ==================
// Timeframe 3 Visual Elements
// ==================
var line TF3pivHighLline = line.new(na, na, na, na, extend=extend.right, style = line.style_dashed, width = 2, color = color.green)
var line TF3pivLowLine = line.new(na, na, na, na, extend=extend.right, style = line.style_dashed, width = 2, color = color.red)

var label TF3bullLabel = label.new(bar_index, na, "", textcolor = color.green, size = size.small, style = label.style_none, textalign = text.align_right)
var label TF3bearLabel = label.new(bar_index, na, "", textcolor = color.red, size = size.small, style = label.style_none)
label.set_x(TF3bullLabel, bar_index[0])
label.set_x(TF3bearLabel, bar_index[0])

TF3pivHi2 = request.security(syminfo.tickerid, TF3timeframe, ta.pivothigh(high, TF3swingSize, TF3swingSize))
TF3pivLo2 = request.security(syminfo.tickerid, TF3timeframe, ta.pivotlow(low, TF3swingSize, TF3swingSize))

// Update TF3 lines and labels
if not na(TF3pivHi2) and timeframe.in_seconds(timeframe.period) < timeframe.in_seconds(TF3timeframe) and TF3Boolean 
    line.set_xy1(TF3pivHighLline, bar_index-(TF3swingSize*(timeframe.in_seconds(TF3timeframe)/timeframe.in_seconds(timeframe.period))), TF3pivHi2)
    line.set_xy2(TF3pivHighLline, bar_index, TF3pivHi2)
    label.set_xy(TF3bullLabel, bar_index-15, TF3pivHi2)

if not na(TF3pivLo2) and timeframe.in_seconds(timeframe.period) < timeframe.in_seconds(TF3timeframe) and TF3Boolean 
    line.set_xy1(TF3pivLowLine, bar_index-(TF3swingSize*(timeframe.in_seconds(TF3timeframe)/timeframe.in_seconds(timeframe.period))), TF3pivLo2)
    line.set_xy2(TF3pivLowLine, bar_index, TF3pivLo2)
    label.set_xy(TF3bearLabel, bar_index-15, TF3pivLo2)

if TF3highBroken and not TF3highActive and TF3Boolean 
    label.set_text(TF3bullLabel, "                                                                                                                                                               "+TF3timeframe + "  Bullish Continuation Above")
    label.set_text(TF3bearLabel, "                                                                                                                                                               "+TF3timeframe + "  Bearish Change of Trend Below")

if TF3lowBroken and not TF3lowActive and TF3Boolean 
    label.set_text(TF3bullLabel, "                                                                                                                                                               "+TF3timeframe + "  Bullish Change of Trend Above")
    label.set_text(TF3bearLabel, "                                                                                                                                                               "+TF3timeframe + "  Bearish Continuation Below") 

// ==================
// Update Trend Direction Variables
// ==================
if TF1highBroken
    TF1prevBreakoutDir := 1

if TF1lowBroken
    TF1prevBreakoutDir := -1

if TF2highBroken
    TF2prevBreakoutDir := 1

if TF2lowBroken
    TF2prevBreakoutDir := -1

if TF3highBroken
    TF3prevBreakoutDir := 1

if TF3lowBroken
    TF3prevBreakoutDir := -1