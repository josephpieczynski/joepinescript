//@version=5
// Author: DarioSoltani (modified by ChatGPT)
// https://www.tradingview.com/u/DarioSoltani/
//
// If you use this code in its original/modified form, do drop me a note.

indicator(title='Trading hours background highlight UTC based', shorttitle='Trading hours', overlay=true, max_labels_count=500)

// ─── SESSION HIGHLIGHTING ─────────────────────────────────────────────
timeinrange(res, sess) =>
    time(res, sess) != 0

showUS        = input(defval=true, title='NY Session On')
tradeHoursUS  = input.session(title='Trade hours US', defval='0830-1600')
currencyinput = input.symbol('FX_IDC:CADUSD+FX_IDC:JPYUSD*100', 'Currency', confirm=true)
sessionUS     = color.rgb(255, 255, 255, 85)

showEU        = input(defval=true, title='Euro Session On')
tradeHoursEU  = input.session(title='Trade hours open Europe', defval='0200-0201')
sessionEU     = color.rgb(147, 34, 212, 32)

showEU1       = input(defval=true, title='Euro Session On')
tradeHoursEU1 = input.session(title='Other', defval='2300-2301')
sessionEU1    = color.rgb(147, 34, 212, 32)
showmidday1   = input(defval=true, title='Lunch On')
tradeHoursmidday1 = input.session(title='Trade hours close Europe ', defval='1050-1100')
sessionmidday1    = color.rgb(147, 34, 212, 32)
showmidday2   = input(defval=true, title='Lunch Off')
tradeHoursmidday2 = input.session(title='Trade hours close Europe ', defval='1250-1300')
sessionmidday2    = color.rgb(147, 34, 212, 32)

bgcolor(showUS and timeinrange(timeframe.period, tradeHoursUS)  ? sessionUS  : na, transp=95)
bgcolor(showEU and timeinrange(timeframe.period, tradeHoursEU)  ? sessionEU  : na, transp=95)
bgcolor(showEU1 and timeinrange(timeframe.period, tradeHoursEU1) ? sessionEU1 : na, transp=95)
bgcolor(showmidday1 and timeinrange(timeframe.period, tradeHoursmidday1) ? sessionmidday1 : na, transp=95)
bgcolor(showmidday2 and timeinrange(timeframe.period, tradeHoursmidday2) ? sessionmidday2 : na, transp=95)

// ─── SYMBOLS AND DISPLAY NAMES ──────────────────────────────────────────
symbol1      = ticker.new("AMEX", "HYG", session.extended)
displayName1 = "HYG"

symbol2      = currencyinput
displayName2 = "Currency"

symbol3      = "(AMEX:XLK+AMEX:XLY+NASDAQ:SMH+AMEX:XLC)/(AMEX:XLV+AMEX:XLP+AMEX:XLU+AMEX:XLE)"
displayName3 = "Sectors"

symbol4      = "NASDAQ:AAPL*15.84+NASDAQ:MSFT*7.467+NASDAQ:GOOG*13.63+NASDAQ:AMZN*10.34+NASDAQ:TSLA*3.478+NASDAQ:META*2.215+NASDAQ:NVDA*2.49"
displayName4 = "Megas"

// Moved this HYG/IEI definition up here so we can call it first in the table
symbol5      = "HYG/IEI"
displayName5 = "HYG/IEI"

symbol6      = "NYMEX:CL1!"
displayName6 = "Oil"

symbol7      = "VOLD"
displayName7 = "VOLD"

symbol8      = "1/CBOE:VIX9D"
displayName8 = "1/VIX"

symbol9      = "1/ZB1!"
displayName9 = "US10Y"

// ─── HELPER FUNCTIONS ────────────────────────────────────────────────────
// Updated percentChange: Combine daily close & previous close into one request
percentChange(sym) =>
    [dclose, dclosePrev] = request.security(sym, "D", [close, close[1]], gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)
    dclose / dclosePrev - 1

RoundUp(number, decimals) =>
    factor = math.pow(10, decimals)
    math.ceil(number * factor) / factor

// ─── GENERIC BREAKOUT FUNCTION ───────────────────────────────────────────
// Returns four booleans indicating if the current bar's price has broken below/above yesterday's and last week's lows/highs.
// Breakout flags are latched for the day/week and reset on a new day/week.
f_genericBreakouts(string sym, string shortName, color labelColor) =>
    // Current bar's close
    secClose = request.security(sym, timeframe.period, close, gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)
    // Get yesterday's high and low in one call
    [dHighPrev, dLowPrev] = request.security(sym, "D", [high[1], low[1]], gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)
    isNewDay = ta.change(dHighPrev)
    // Get last week's high and low in one call
    [wHighPrev, wLowPrev] = request.security(sym, "W", [high[1], low[1]], gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)
    isNewWeek = ta.change(wHighPrev)

    // Persistent breakout flags
    var bool dailyBelow  = false
    var bool dailyAbove  = false
    var bool weeklyBelow = false
    var bool weeklyAbove = false
    var bool dailyBelowTaken  = false
    var bool dailyAboveTaken  = false
    var bool weeklyBelowTaken = false
    var bool weeklyAboveTaken = false

    // Reset flags on new day/week
    if isNewDay
        dailyBelow := false
        dailyAbove := false
        dailyBelowTaken := false
        dailyAboveTaken := false
    if isNewWeek
        weeklyBelow := false
        weeklyAbove := false
        weeklyBelowTaken := false
        weeklyAboveTaken := false

    // Check daily breakouts
    if secClose < dLowPrev
        dailyBelow := true
        dailyAbove := false
        if not dailyBelowTaken
            label.new(bar_index, high+5, shortName + " PDL", color=labelColor, style=label.style_label_down, textcolor=color.white, size=size.small)
            dailyBelowTaken := true

    if secClose > dHighPrev
        dailyAbove := true
        dailyBelow := false
        if not dailyAboveTaken
            label.new(bar_index, low-5, shortName + " PDH", color=labelColor, style=label.style_label_up, textcolor=color.white, size=size.small)
            dailyAboveTaken := true

    // Check weekly breakouts
    if secClose < wLowPrev
        weeklyBelow := true
        weeklyAbove := false
        if not weeklyBelowTaken
            label.new(bar_index, high+5, shortName + " PWL", color=labelColor, style=label.style_label_down, textcolor=color.white, size=size.normal)
            weeklyBelowTaken := true

    if secClose > wHighPrev
        weeklyAbove := true
        weeklyBelow := false
        if not weeklyAboveTaken
            label.new(bar_index, low-5, shortName + " PWH", color=labelColor, style=label.style_label_up, textcolor=color.white, size=size.normal)
            weeklyAboveTaken := true

    [dailyBelow, dailyAbove, weeklyBelow, weeklyAbove]

// ─── CALL THE GENERIC FUNCTION FOR TARGET SYMBOLS ─────────────────────────
[dBelowHYG,    dAboveHYG,    wBelowHYG,    wAboveHYG]    = f_genericBreakouts("HYG", "HYG",  color.blue)
[dBelowCUR,    dAboveCUR,    wBelowCUR,    wAboveCUR]    = f_genericBreakouts(symbol2, "CUR", #817619)
[dBelowBTC,    dAboveBTC,    wBelowBTC,    wAboveBTC]    = f_genericBreakouts(symbol6, "Oil", color.rgb(129, 58, 25))
[dBelowHYGIEI, dAboveHYGIEI, wBelowHYGIEI, wAboveHYGIEI] = f_genericBreakouts(symbol5, "HYG/IEI", color.purple)
// NEW: Call the breakout function for US10Y
[dBelowUS10Y, dAboveUS10Y, wBelowUS10Y, wAboveUS10Y] = f_genericBreakouts(symbol9, "US10Y", color.orange)

// ─── Build Breakout Strings ──────────────────────────────────────────────
Dhygstr     = dAboveHYG    ? "PDH" : dBelowHYG    ? "PDL" : ""
Whygstr     = wAboveHYG    ? "PWH" : wBelowHYG    ? "PWL" : ""

Dcurstr     = dAboveCUR    ? "PDH" : dBelowCUR    ? "PDL" : ""
Wcurstr     = wAboveCUR    ? "PWH" : wBelowCUR    ? "PWL" : ""

Dbtcstr     = dAboveBTC    ? "PDH" : dBelowBTC    ? "PDL" : ""
Wbtcstr     = wAboveBTC    ? "PWH" : wBelowBTC    ? "PWL" : ""

Dhygieistr  = dAboveHYGIEI ? "PDH" : dBelowHYGIEI ? "PDL" : ""
Whygieistr  = wAboveHYGIEI ? "PWH" : wBelowHYGIEI ? "PWL" : ""

Dus10yDailyStr = dAboveUS10Y ? "PDH" : dBelowUS10Y ? "PDL" : ""
Wus10yWeeklyStr = wAboveUS10Y ? "PWH" : wBelowUS10Y ? "PWL" : ""

// ─── Pre-calculate Percent Changes for Table Display ─────────────────────
pchg_HYG     = percentChange(symbol1)
pchg_CUR     = percentChange(symbol2)
pchg_SECTORS = percentChange(symbol3)
pchg_MEGAS   = percentChange(symbol4)
pchg_HYGIEI  = percentChange(symbol5)
pchg_COPPER  = percentChange(symbol6)
pchg_VIX     = percentChange(symbol8)
pchg_US10Y   = percentChange(symbol9)
pchg_VOLD    = request.security(symbol7, "3", close)

// ─── TABLE DISPLAY ───────────────────────────────────────────────────────
var p = table.new(position = position.bottom_left, columns = 3, rows = 9)

// Row 0: HYG/IEI (moved to top)
table.cell(p, 1, 0, text = displayName5 + " " + Dhygieistr + " " + Whygieistr,
     bgcolor = pchg_HYGIEI >= 0 ? color.new(color.green, transp=50) : color.new(color.red, transp=50),
     text_size = size.auto, text_color = color.white)
table.cell(p, 2, 0, text = str.tostring(RoundUp(pchg_HYGIEI * 100, 2)) + "%",
     bgcolor = pchg_HYGIEI >= 0 ? color.new(color.green, transp=50) : color.new(color.red, transp=50),
     text_size = size.auto, text_color = color.white)

// Row 1: HYG
table.cell(p, 1, 1, text = displayName1 + " " + Dhygstr + " " + Whygstr, 
          bgcolor = pchg_HYG >= 0 ? color.new(color.green, transp = 50) : color.new(color.red, transp = 50), 
          text_size = size.auto, text_color = color.white)
table.cell(p, 2, 1, text = str.tostring(RoundUp(pchg_HYG * 100, 2)) + "%", 
          bgcolor = pchg_HYG >= 0 ? color.new(color.green, transp = 50) : color.new(color.red, transp = 50), 
          text_size = size.auto, text_color = color.white)

// Row 2: Currency
table.cell(p, 1, 2, text = displayName2 + " " + Dcurstr + " " + Wcurstr, 
          bgcolor = pchg_CUR >= 0 ? color.new(color.green, transp = 50) : color.new(color.red, transp = 50), 
          text_size = size.auto, text_color = color.white)
table.cell(p, 2, 2, text = str.tostring(RoundUp(pchg_CUR * 100, 2)) + "%", 
          bgcolor = pchg_CUR >= 0 ? color.new(color.green, transp = 50) : color.new(color.red, transp = 50), 
          text_size = size.auto, text_color = color.white)

// Row 3: Sectors
table.cell(p, 1, 3, text = displayName3, 
          bgcolor = pchg_SECTORS >= 0 ? color.new(color.rgb(76, 175, 79, 50), transp = 50) : color.new(color.red, transp = 50), 
          text_size = size.auto, text_color = color.white)
table.cell(p, 2, 3, text = str.tostring(RoundUp(pchg_SECTORS * 100, 2)) + "%", 
          bgcolor = pchg_SECTORS >= 0 ? color.new(color.green, transp = 50) : color.new(color.red, transp = 50), 
          text_size = size.auto, text_color = color.white)

// Row 4: Megas
table.cell(p, 1, 4, text = displayName4, 
          bgcolor = pchg_MEGAS >= 0 ? color.new(color.green, transp = 50) : color.new(color.red, transp = 50), 
          text_size = size.auto, text_color = color.white)
table.cell(p, 2, 4, text = str.tostring(RoundUp(pchg_MEGAS * 100, 2)) + "%", 
          bgcolor = pchg_MEGAS >= 0 ? color.new(color.green, transp = 50) : color.new(color.red, transp = 50), 
          text_size = size.auto, text_color = color.white)

// Row 5: Copper (BTC)
table.cell(p, 1, 5, text = displayName6 + " " + Dbtcstr + " " + Wbtcstr, 
          bgcolor = pchg_COPPER >= 0 ? color.new(color.green, transp = 50) : color.new(color.red, transp = 50), 
          text_size = size.auto, text_color = color.white)
table.cell(p, 2, 5, text = str.tostring(RoundUp(pchg_COPPER * 100, 2)) + "%", 
          bgcolor = pchg_COPPER >= 0 ? color.new(color.green, transp = 50) : color.new(color.red, transp = 50), 
          text_size = size.auto, text_color = color.white)

// Row 6: VOLD
table.cell(p, 1, 6, text = displayName7, 
          bgcolor = pchg_VOLD >= 0 ? color.new(color.green, transp = 50) : color.new(color.red, transp = 50), 
          text_size = size.auto, text_color = color.white)
table.cell(p, 2, 6, text = str.tostring(RoundUp(pchg_VOLD / 1000000, 2)), 
          bgcolor = pchg_VOLD >= 0 ? color.new(color.green, transp = 50) : color.new(color.red, transp = 50), 
          text_size = size.auto, text_color = color.white)

// Row 7: 1/VIX
table.cell(p, 1, 7, text = displayName8, 
          bgcolor = pchg_VIX >= 0 ? color.new(color.green, transp = 50) : color.new(color.red, transp = 50), 
          text_size = size.auto, text_color = color.white)
table.cell(p, 2, 7, text = str.tostring(RoundUp(pchg_VIX * 100, 2)) + "%", 
          bgcolor = pchg_VIX >= 0 ? color.new(color.green, transp = 50) : color.new(color.red, transp = 50), 
          text_size = size.auto, text_color = color.white)

// Row 8: US10Y (with inverted color scheme)
table.cell(p, 1, 8, text = displayName9 + " " + Dus10yDailyStr + " " + Wus10yWeeklyStr, 
          bgcolor = pchg_US10Y >= 0 ? color.new(color.green, transp = 50) : color.new(color.red, transp = 50), 
          text_size = size.auto, text_color = color.white)
table.cell(p, 2, 8, text = str.tostring(RoundUp(pchg_US10Y * 100, 2)) + "%", 
          bgcolor = pchg_US10Y >= 0 ? color.new(color.green, transp = 50) : color.new(color.red, transp = 50), 
          text_size = size.auto, text_color = color.white)

